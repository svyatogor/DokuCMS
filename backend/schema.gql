scalar JSON
scalar Date

enum OrderStatus {
  draft
  new
  canceled
  shipped
  completed
}

interface Block {
  _type: String!
  ref: ID
}

type StaticText implements Block {
  id: ID!
  ref: ID
  _type: String!
  content: JSON
  key: String
  type: String
  global: Boolean
}

input StaticTextInput {
  id: ID
  content: String!
  locale: String!
  key: String
  global: Boolean
}

type Page {
  id: ID!
  slug: String
  published: Boolean
  layout: String
  parent: Page
  title: JSON
  sections: JSON
  properties: JSON
  position: Int
}

type Site {
  id: ID!
  key: String!
  domains: [String!]
  allowedModules: [String!]!
  supportedLanguages: [String!]!
  layouts: JSON
  documentTypes: JSON
  features: [String!]
}

type Folder {
  id: ID!
  slug: String
  parent: ID
  name: JSON
  position: Int
  hidden: Boolean
}

type File {
  originalName: String
  displayName: JSON
  size: Int
  type: String
  url: String
}

type FileList {
  id: ID!
  files: [File!]
  template: String
  site: ID!
}

type Item {
  id: ID!
  position: Int
  folder: ID
  data: JSON
}

input PageInput {
  id: ID
  slug: String
  published: Boolean
  layout: String
  parent: ID
  title: String
  properties: JSON
  position: Int
}

input BlockInput {
  page: ID!
  section: String!
  _type: String!
}

input BlockRefInput {
  page: ID!
  ref: ID!
}

input FolderInput {
  id: ID
  parent: ID
  catalog: String
  name: String!
  locale: String
}

input FileListInput {
  id: ID
  template: String
  files: [FileInput!]!
}

input FileInput {
  originalName: String!
  displayName: JSON
  size: Int
  type: String
  url: String
}

type OrderLine {
  product: ID!
  name: String!
  count: Int!
  price: Float
  total: Float
}

type Address {
  country: String
  city: String
  postalCode: String
  streetAddress: String
  name: String
  email: String
  phone: String
}

type DeliveryDescription {
  cost: Float
  label: String
}

type Order {
  id: ID!
  number: Int
  lines: [OrderLine!]!
  billingAddress: Address!
  shippingAddress: Address
  status: String!
  paymentMethod: String
  paymentStatus: String
  total: Float
  createdAt: Date
  receipt: JSON
  delivery: DeliveryDescription
}

type Query {
  pages: [Page]
  page(id: ID!): Page
  staticText(id: ID!): StaticText
  fileList(id: ID!): FileList
  site: Site
  snippets: [StaticText]
  folders(catalog: String!): [Folder!]
  folder(id: ID!): Folder
  items(folder: ID, search: String): [Item!]!
  item(id: ID!): Item
  eshopOrders(search: String, limit: Int, offset: Int): [Order]
}

type Mutation {
  upsertPage(page: PageInput!, locale: String): Page
  deletePage(id: ID!): Boolean
  orderPages(pages: [ID!]!, parent: ID): [Page]
  addBlock(block: BlockInput!): ID
  removeBlock(block: BlockRefInput!): Boolean
  saveStaticText(input: StaticTextInput!): StaticText
  upsertFileList(input: FileListInput!, locale: String!): FileList
  attachImage(type: String!, id: ID!, url: String!): Boolean
  upsertItem(id: ID, folder: ID!, data: JSON!, locale: String): Item
  moveItem(id: ID!, newPosition: Int!): Boolean
  deleteItem(id: ID!): Boolean
  upsertFolder(folder: FolderInput!): Folder
  deleteFolder(id: ID!): Boolean
  orderFolders(folders: [ID!]!, parent: ID): [Folder]
  updateOrderStatus(order: ID!, status: OrderStatus!): Order
}